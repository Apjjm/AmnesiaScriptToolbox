#ifndef LIB_GLOBALINT_LHPS
#define LIB_GLOBALINT_LHPS

#include "../IStringConversion.lhps"
#include "../Math/fCompare.lhps"
#include "../ISave.lhps"
#include "AmnesiaVar.lhps"

/**
 * Wrapper class for GlobalVarInt variables stored using the Amnesia script
 * functions. Behaves like a normal int using a standard operator set for
 * manipulating the data.
 *
 * Assigning GlobalInt to primitives is not supported, since global operators
 * for Angelscript can only be implemented in native code (as far as I know).
 **/
class GlobalInt : IStringConversion, AmnesiaVar, IGlobalSave {
    
	void loadGlobal(const string &in id) {
        // change my value, keep my identity
        SetGlobalVarInt(varName, GetGlobalVarInt(id));
    }

    void saveGlobal(const string &in id) const {
        // create a copy
        SetGlobalVarInt(id, GetGlobalVarInt(varName));
    }

    /////////////////////////////////////
    // Public methods
    /////////////////////////////////////

    GlobalInt(string name) {
        setName(name);
    }

    string toString() const {
        return "GlobalInt \"" + varName + "\":" + GetGlobalVarInt(varName);
    }

    void fromString(const string& in asString) {
        SetGlobalVarInt(varName,StringToInt(asString));
    }

    /////////////////////////////////////
    // == operator overloads
    /////////////////////////////////////

    // Equals another GlobalInt
    // Only checks the variable value, does not compare varName
    bool opEquals(const GlobalInt& in other) const {
        return GetGlobalVarInt(varName) == GetGlobalVarInt(other.varName);
    }

    // Equals an int
    bool opEquals(int other) const {
        return GetGlobalVarInt(varName) == other;
    }

    // Check varName equals string
    bool opEquals(const string& in other) const {
        return varName == other;
    }

    bool opEquals(float other) const {
        return fCompare(other, GetGlobalVarInt(varName));
    }

    /////////////////////////////////////
    // = operator overloads
    /////////////////////////////////////

    // Assign GlobalInt value
    GlobalInt@ opAssign(const GlobalInt& in other) {
        SetGlobalVarInt(varName, GetGlobalVarInt(other.varName));
        return this;
    }

    // Assign int value
    GlobalInt@ opAssign(int other) {
        SetGlobalVarInt(varName, other);
        return this;
    }

    // Assign a float value
    GlobalInt@ opAssign(float other) {
        SetGlobalVarInt(varName, int(other));
        return this;
    }

    /////////////////////////////////////
    // Binary operator overloads
    /////////////////////////////////////

    // string + GlobalInt
    // return concatenation
    string opAdd_r(const string& in other) const {
        return other + GetGlobalVarInt(varName);
    }

    // += other GlobalInt
    GlobalInt@ opAddAssign(const GlobalInt& in other) {
        int x = GetGlobalVarInt(varName) + GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    // += an int
    GlobalInt@ opAddAssign(int other) {
        other += GetGlobalVarInt(varName);
        SetGlobalVarInt(varName, other);
        return this;
    }

    // += a float
    GlobalInt@ opAddAssign(float other) {
        int x = GetGlobalVarInt(varName) + int(other);
        SetGlobalVarInt(varName, x);
        return this;
    }

    // int - GlobalInt
    int opSub_r(int other) const {
        return other - GetGlobalVarInt(varName);
    }

    // GlobalInt - GlobalInt
    int opSub(const GlobalInt& in other) const {
        return GetGlobalVarInt(varName) - GetGlobalVarInt(other.varName);
    }

    // float - GlobalInt
    int opSub_r(float other) const {
        return int(other) - GetGlobalVarInt(varName);
    }

    // GlobalInt - float
    int opSub(float other) const {
        return GetGlobalVarInt(varName) - int(other);
    }

    // -= other GlobalInt
    GlobalInt@ opSubAssign(const GlobalInt& in other) {
        int x = GetGlobalVarInt(varName) - GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    // -= an int
    GlobalInt@ opSubAssign(int other) {
        other = GetGlobalVarInt(varName) - other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    // -= a float
    GlobalInt@ opSubAssign(float other) {
        int x = GetGlobalVarInt(varName) - int(other);
        SetGlobalVarInt(varName, x);
        return this;
    }

    int opMul_r(int other) const {
        return other * GetGlobalVarInt(varName);
    }

    int opMul(int other) const {
        return GetGlobalVarInt(varName) * other;
    }

    int opMul_r(float other) const {
        return int(other) * GetGlobalVarInt(varName);
    }

    int opMul(float other) const {
        return GetGlobalVarInt(varName) * int(other);
    }

    int opMul(const GlobalInt& in other) const {
        return GetGlobalVarInt(varName) * GetGlobalVarInt(other.varName);
    }

    GlobalInt@ opMulAssign(const GlobalInt& in other) {
        int x = GetGlobalVarInt(varName) * GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    GlobalInt@ opMulAssign(int other) {
        other = GetGlobalVarInt(varName) * other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opMulAssign(float other) {
        int x = GetGlobalVarInt(varName) * other;
        SetGlobalVarInt(varName, x);
        return this;
    }

    int opNeg() const {
        return -GetGlobalVarInt(varName);
    }

    int opCom() const {
        return ~GetGlobalVarInt(varName);
    }

    int opPreInc() {
        int x = GetGlobalVarInt(varName) + 1;
        SetGlobalVarInt(varName, x);
        return x;
    }

    int opPreDec() {
        int x = GetGlobalVarInt(varName) - 1;
        SetGlobalVarInt(varName, x);
        return x;
    }

    int opPostInc() {
        int x = GetGlobalVarInt(varName);
        SetGlobalVarInt(varName, x+1);
        return x;
    }

    int opPostDec() {
        int x = GetGlobalVarInt(varName);
        SetGlobalVarInt(varName, x-1);
        return x;
    }

    int opCmp(int other) const {
        if(GetGlobalVarInt(varName) < other)
            return 1;
        else if(GetGlobalVarInt(varName) > other)
            return -1;
        else
            return 0;
    }

    GlobalInt@ opModAssign(int other) {
        other = GetGlobalVarInt(varName) % other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opModAssign(const GlobalInt& other) {
        int x = GetGlobalVarInt(varName) % GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    GlobalInt@ opAndAssign(int other) {
        other = GetGlobalVarInt(varName) & other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opAndAssign(const GlobalInt& other) {
        int x = GetGlobalVarInt(varName) & GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    GlobalInt@ opOrAssign(int other) {
        other = GetGlobalVarInt(varName) | other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opOrAssign(const GlobalInt& other) {
        int x = GetGlobalVarInt(varName) | GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    GlobalInt@ opXorAssign(int other) {
        other = GetGlobalVarInt(varName) ^ other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opXorAssign(const GlobalInt& other) {
        int x = GetGlobalVarInt(varName) ^ GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    GlobalInt@ opShrAssign(int other) {
        other = GetGlobalVarInt(varName) >> other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opShrAssign(const GlobalInt& other) {
        int x = GetGlobalVarInt(varName) >> GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    GlobalInt@ opShlAssign(int other) {
        other = GetGlobalVarInt(varName) << other;
        SetGlobalVarInt(varName, other);
        return this;
    }

    GlobalInt@ opShlAssign(const GlobalInt& other) {
        int x = GetGlobalVarInt(varName) << GetGlobalVarInt(other.varName);
        SetGlobalVarInt(varName, x);
        return this;
    }

    int opMod(int other) const {
        return GetGlobalVarInt(varName) % other;
    }

    int opMod(const GlobalInt& other) const {
        return GetGlobalVarInt(varName) % GetGlobalVarInt(other.varName);
    }

    int opMod_r(int other) const {
        return other % GetGlobalVarInt(varName);
    }

    int opAnd(int other) const {
        return GetGlobalVarInt(varName) & other;
    }

    int opAnd(const GlobalInt& other) const {
        return GetGlobalVarInt(varName) & GetGlobalVarInt(other.varName);
    }

    int opAnd_r(int other) const {
        return other & GetGlobalVarInt(varName);
    }

    int opOr(int other) const {
        return GetGlobalVarInt(varName) | other;
    }

    int opOr(const GlobalInt& other) const {
        return GetGlobalVarInt(varName) | GetGlobalVarInt(other.varName);
    }

    int opOr_r(int other) const {
        return other | GetGlobalVarInt(varName);
    }

    int opXor(int other) const {
        return GetGlobalVarInt(varName) ^ other;
    }

    int opXor(const GlobalInt& other) const {
        return GetGlobalVarInt(varName) ^ GetGlobalVarInt(other.varName);
    }

    int opXor_r(int other) const {
        return other ^ GetGlobalVarInt(varName);
    }

    int opShr(int other) const {
        return GetGlobalVarInt(varName) >> other;
    }

    int opShr(const GlobalInt& other) const {
        return GetGlobalVarInt(varName) >> GetGlobalVarInt(other.varName);
    }

    int opShr_r(int other) const {
        return other >> GetGlobalVarInt(varName);
    }

    int opShl(int other) const {
        return GetGlobalVarInt(varName) << other;
    }

    int opShl(const GlobalInt& other) const {
        return GetGlobalVarInt(varName) << GetGlobalVarInt(other.varName);
    }

    int opShl_r(int other) const {
        return other << GetGlobalVarInt(varName);
    }
}

class GlobalInt32 : GlobalInt { }

#endif // LIB_GLOBALINT_LHPS
