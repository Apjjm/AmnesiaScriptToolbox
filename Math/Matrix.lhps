#ifndef LIB_MATRIX4_LHPS
#define LIB_MATRIX4_LHPS
#include "../ISave.lhps"
#include "../IStringConversion.lhps"
#include "Constants.lhps"
#include "FCompare.lhps"
#include "Vector3.lhps"

/* TODO
*Quaternion
*/

class Matrix : ILocalSave, IGlobalSave, IStringConversion {

	private float[] m;
	
	Matrix() {
		m = float[](9);
	}
	
	Matrix(const Matrix& in matrix) {
		m = matrix.m;
	}

	Matrix(float[] matrix) {
		if(matrix.length() == 9)
		 {
			m = matrix;
		 }
		else
		 {
			m = float[](9);
			AddDebugMessage("Err: Matrix::ctor(float[]) invalid matrix dimensions",false);
		 }
	}
	
	Matrix(float[][] matrixRowsCols) {
		m = float[](9);
		set(matrixRowsCols);
	}
	
	//////////////////////////////////////////////////
	// Saves / ToString & FromString
	//////////////////////////////////////////////////
	
	void saveLocal(const string& in id) const {
		for(uint i=0; i<9; i++)
			SetLocalVarFloat(id + "_{MAT_m" + i + "}",m[i]);
	}
	
	void loadLocal(const string& in id) {
		for(uint i=0; i<9; i++)
			m[i] = GetLocalVarFloat(id + "_{MAT_m" + i + "}");
	}
	
	void saveGlobal(const string& in id) const {
		for(uint i=0; i<9; i++)
			SetGlobalVarFloat(id + "_{MAT_m" + i + "}",m[i]);
	}
	
	void loadGlobal(const string& in id) {
		for(uint i=0; i<9; i++)
			m[i] = GetGlobalVarFloat(id + "_{MAT_m" + i + "}");
	}
	
	string toString() const {
		string x = "[";
		for(int r=0; r<3; r++)
		 {
			x += "(";
			for(int c=0; c<3; c++)
			 {
				if(c == 0)
					x += "" + get(r,c);
				else
					x += "," + get(r,c);
			 }
			x += ")";
		 }
		return x + "]";
	}
	
	void fromString(const string& in asString) {
		AddDebugMessage("Matrix::fromString() not implemented yet",false);
		/* Todo: Wait to confirm number parsing in script update instead of rolling own */
	}
	
	//////////////////////////////////////////////////
	// Matrix Construction
	//////////////////////////////////////////////////
	
	void setZeros() {
		m = float[](9);
	}
	
	void setIdentity() {
		m[0]=1.0f; m[1]=0.0f; m[2]=0.0f;
		m[3]=0.0f; m[4]=1.0f; m[5]=0.0f;
		m[6]=0.0f; m[7]=0.0f; m[8]=1.0f;
	}

	void setOnes() {
		m[0]=1.0f; m[1]=1.0f; m[2]=1.0f;
		m[3]=1.0f; m[4]=1.0f; m[5]=1.0f;
		m[6]=1.0f; m[7]=1.0f; m[8]=1.0f;
	}
	
	//////////////////////////////////////////////////
	// Rotation Matricies
	//////////////////////////////////////////////////
	void setRotation(float eulerX, float eulerY, float eulerZ) {
		float cx = MathCos(eulerX * M_DEGTORAD);
		float sx = MathSin(eulerX * M_DEGTORAD); 	
		float cy = MathCos(eulerY * M_DEGTORAD);
		float sy = MathSin(eulerY * M_DEGTORAD); 
		float cz = MathCos(eulerZ * M_DEGTORAD);
		float sz = MathSin(eulerZ * M_DEGTORAD); 		
		m[0]= cy*cz           ; m[1]= -cy*sz          ; m[2]= -sy   ;//   |CE     -CF     -D|
		m[3]= cx*sz - sx*sy*cz; m[4]= cx*cz - sx*sy*sz; m[5]= -sx*cy;//M =|AF-BDE AE-BDF -BC|
		m[6]= sx*sz + cx*sy*cz; m[7]= sx*cz - cx*sy*sz; m[8]= cx*cy ;//	  |BF+ADE BE-ADF  AC| 
	}
	
	float[] getEulerAngles() const {		
		float aX = 0.0f;
		float aY = -MathAsin(m[2]);
		float aZ = 0.0f;
	
		//Check for gimbal lock
		float cy = -MathCos(aY);
		if(fCompare(cy,0.0f))
		{
			//gimbal lock has occurred
			aZ = MathAtan2(m[4],m[3]);
		}
		else
		{
			//No gimbal lock
			aX = MathAtan2(m[8] / cy, -m[5] / cy);
			aZ = MathAtan2(m[0] / cy, -m[1] / cy);
		}
		
		float[] r = { aX * M_RADTODEG, aY * M_RADTODEG, aZ * M_RADTODEG };
		return r;
	}
	
	//////////////////////////////////////////////////
	// Matrix entry manipulation
	//////////////////////////////////////////////////
	
	float[] getRow(int rowIndex) const {
		float[] r = { m[3*rowIndex], m[3*rowIndex+1],m[3*rowIndex+2] };
		return r;
	}
	
	float[] getCol(int colIndex) const {
		float[] c = { m[colIndex], m[colIndex+3],m[colIndex+6] };
		return c;
	}
	
	void setRow(int rowIndex, float[] row) {
		m[3*rowIndex] = row[0];
		m[3*rowIndex+1] = row[1];
		m[3*rowIndex+2] = row[2];
	}
	
	void setCol(int colIndex, float[] col) {
		m[colIndex] = col[0];
		m[colIndex+1] = col[0];
		m[colIndex+2] = col[0];
	}
	
	float get(int row, int col) const {
		return m[ (3*row) + col];
	}
	
	void set(int row, int col, float value) {
		m[(3*row)+col]=value;
	}
	
	void set(float[] matrix) {
		if(matrix.length() == 9)
		 {
			m = matrix;
		 }
		else
		 {
			AddDebugMessage("Err: Matrix::set(float[]) invalid matrix dimensions",false);
		 }
	}
	
	void set(float[][] matrixRowsCols) {
		if(matrixRowsCols.length() == 3)
		 {
			for(uint i=0; i<3; i++)
			 {
				if(matrixRowsCols[i].length() == 3)
				 {
					m[i*3    ] = matrixRowsCols[i][0];
					m[i*3 + 1] = matrixRowsCols[i][1];
					m[i*3 + 2] = matrixRowsCols[i][2];
				 }
				else
				 {
					AddDebugMessage("Err: Matrix::set(float[][]) invalid matrix dimensions",false);
				 }
			 }
		 }
		else
		 {
			AddDebugMessage("Err: Matrix::set(float[][]) invalid matrix dimensions",false);
		 }
	}
	
	float[] toArray() const {
		return m;
	}
	
	bool isZeros() const {
		return fCompare(m[0],0.0f) && fCompare(m[1],0.0f) && fCompare(m[2],0.0f) 
		    && fCompare(m[3],0.0f) && fCompare(m[4],0.0f) && fCompare(m[5],0.0f)
			&& fCompare(m[6],0.0f) && fCompare(m[7],0.0f) && fCompare(m[8],0.0f); 
	}
	
	bool isIdentity() const {
		return fCompare(m[0],1.0f) && fCompare(m[1],0.0f) && fCompare(m[2],0.0f) 
		    && fCompare(m[3],0.0f) && fCompare(m[4],1.0f) && fCompare(m[5],0.0f)
			&& fCompare(m[6],0.0f) && fCompare(m[7],0.0f) && fCompare(m[8],1.0f); 
	}
	
	bool isOnes() const {
		return fCompare(m[0],1.0f) && fCompare(m[1],1.0f) && fCompare(m[2],1.0f) 
		    && fCompare(m[3],1.0f) && fCompare(m[4],1.0f) && fCompare(m[5],1.0f)
			&& fCompare(m[6],1.0f) && fCompare(m[7],1.0f) && fCompare(m[8],1.0f); 
	}
	
	//////////////////////////////////////////////////
	// Matrix operations
	//////////////////////////////////////////////////
	
	Matrix getTranspose() const {
		Matrix o;
		o.m[0] = m[0]; o.m[1] = m[3]; o.m[2] = m[6];
		o.m[3] = m[1]; o.m[4] = m[4]; o.m[5] = m[7];
		o.m[6] = m[2]; o.m[7] = m[5]; o.m[8] = m[8];
		return o;
	}
	
	bool calculateInverse(Matrix& out inverse) const {
		float idet = getDeterminant();
		inverse = Matrix();
		
		if(fCompare(idet,0.0f)) return false; //Matrix has no inverse (det(m)=0)
		
		idet = 1/idet;
		inverse.m[0] =    m[4]*m[8] - m[5]*m[7]   * idet;
		inverse.m[1] = -( m[1]*m[8] - m[7]*m[2] ) * idet;
		inverse.m[2] =    m[1]*m[5] - m[4]*m[2]   * idet;

		inverse.m[3] = -( m[3]*m[8] - m[5]*m[6] ) * idet;
		inverse.m[4] =    m[0]*m[8] - m[6]*m[2]   * idet;
		inverse.m[5] = -( m[0]*m[5] - m[3]*m[2] ) * idet;

		inverse.m[6] =    m[3]*m[7] - m[6]*m[4]   * idet;
		inverse.m[7] = -( m[0]*m[7] - m[6]*m[1] ) * idet;
		inverse.m[8] =    m[0]*m[4] - m[1]*m[3]   * idet;
		return true;
	}
	
	bool calculateInverse(Matrix& out inverse, float epsilon) const {
		float idet = getDeterminant();
		inverse = Matrix();
		
		if(fCompare(idet,0.0f,epsilon)) return false; //Matrix has no inverse (det(m)=0)
		
		idet = 1/idet;
		inverse.m[0] =    m[4]*m[8] - m[5]*m[7]   * idet;
		inverse.m[1] = -( m[1]*m[8] - m[7]*m[2] ) * idet;
		inverse.m[2] =    m[1]*m[5] - m[4]*m[2]   * idet;

		inverse.m[3] = -( m[3]*m[8] - m[5]*m[6] ) * idet;
		inverse.m[4] =    m[0]*m[8] - m[6]*m[2]   * idet;
		inverse.m[5] = -( m[0]*m[5] - m[3]*m[2] ) * idet;

		inverse.m[6] =    m[3]*m[7] - m[6]*m[4]   * idet;
		inverse.m[7] = -( m[0]*m[7] - m[6]*m[1] ) * idet;
		inverse.m[8] =    m[0]*m[4] - m[1]*m[3]   * idet;
		return true;
	}
	
	float getDeterminant() const {
		return m[0] * ( m[4]*m[8] - m[7]*m[5] )
		       - m[1] * ( m[3]*m[8] - m[6]*m[5] )
		       + m[2] * ( m[3]*m[7] - m[6]*m[4] );
	}
	
	Matrix@ multiplyElements(const Matrix& in rhs) {
		m[0] *= rhs.m[0]; m[1] *= rhs.m[1]; m[2] *= rhs.m[2];
		m[3] *= rhs.m[3]; m[4] *= rhs.m[4]; m[5] *= rhs.m[5];
		m[6] *= rhs.m[6]; m[7] *= rhs.m[7]; m[8] *= rhs.m[8];
		return this;
	}
	
	Matrix norm() const {
		float n = getDeterminant();
		return (n>0.0f)?(opDiv(n)):(Matrix());
	}
	
	Matrix normExt(float epsilon) const {
		Matrix output = Matrix(m);
		float n = getDeterminant();
		
		if(n < epsilon) return Matrix();
		
		while(!fCompare(n,1.0f,epsilon))
		{
			output /= n;
			n = output.getDeterminant();
		}
	
		return output;
	}
	
	//////////////////////////////////////////////////
	// Matrix operators
	//////////////////////////////////////////////////
	
	// Equality operator & Assign
	bool opEquals(const Matrix& in rhs) const {
		return fCompare(m[0],rhs.m[0]) && fCompare(m[1],rhs.m[1]) && fCompare(m[2],rhs.m[2]) 
		    && fCompare(m[3],rhs.m[3]) && fCompare(m[4],rhs.m[4]) && fCompare(m[5],rhs.m[5])
			&& fCompare(m[6],rhs.m[6]) && fCompare(m[7],rhs.m[7]) && fCompare(m[8],rhs.m[8]); 
	}
	
	/* Matrix@ opAssign(const Matrix& in rhs) is bitwise copy by default */
	
	Matrix@ opAssign(const float[]& in rhs) {
		set(rhs);
		return this;
	}
	
	Matrix@ opAssign(const float[][]& in rhs) {
		set(rhs);
		return this;
	}
	
	//Addition & Subtraction
	Matrix@ opAddAssign(const Matrix& in rhs) { 
		m[0] += rhs.m[0]; m[1] += rhs.m[1]; m[2] += rhs.m[2];
		m[3] += rhs.m[3]; m[4] += rhs.m[4]; m[5] += rhs.m[5];
		m[6] += rhs.m[6]; m[7] += rhs.m[7]; m[8] += rhs.m[8];
		return this;
	}
	
	Matrix@ opSubAssign(const Matrix& in rhs) {
		m[0] -= rhs.m[0]; m[1] -= rhs.m[1]; m[2] -= rhs.m[2];
		m[3] -= rhs.m[3]; m[4] -= rhs.m[4]; m[5] -= rhs.m[5];
		m[6] -= rhs.m[6]; m[7] -= rhs.m[7]; m[8] -= rhs.m[8];
		return this;
	}
	
	Matrix@ opAddAssign(const float rhs) { 
		m[0] += rhs; m[1] += rhs; m[2] += rhs;
		m[3] += rhs; m[4] += rhs; m[5] += rhs;
		m[6] += rhs; m[7] += rhs; m[8] += rhs;
		return this;
	}
	
	Matrix@ opSubAssign(const float rhs) {
		m[0] -= rhs; m[1] -= rhs; m[2] -= rhs;
		m[3] -= rhs; m[4] -= rhs; m[5] -= rhs;
		m[6] -= rhs; m[7] -= rhs; m[8] -= rhs;
		return this;
	}
	
	Matrix@ opAddAssign(const int rhs) { 
		m[0] += rhs; m[1] += rhs; m[2] += rhs;
		m[3] += rhs; m[4] += rhs; m[5] += rhs;
		m[6] += rhs; m[7] += rhs; m[8] += rhs;
		return this;
	}
	
	Matrix@ opSubAssign(const int rhs) {
		m[0] -= rhs; m[1] -= rhs; m[2] -= rhs;
		m[3] -= rhs; m[4] -= rhs; m[5] -= rhs;
		m[6] -= rhs; m[7] -= rhs; m[8] -= rhs;
		return this;
	}
	
	Matrix opAdd(const Matrix& in rhs) const {
		Matrix ret;
		ret.m[0] = m[0]+rhs.m[0]; ret.m[1] = m[1]+rhs.m[1]; ret.m[2] = m[2]+rhs.m[2];
		ret.m[3] = m[3]+rhs.m[3]; ret.m[4] = m[4]+rhs.m[4]; ret.m[5] = m[5]+rhs.m[5];
		ret.m[6] = m[6]+rhs.m[6]; ret.m[7] = m[7]+rhs.m[7]; ret.m[8] = m[8]+rhs.m[8];
		return ret;
	}
	
	Matrix opSub(const Matrix& in rhs) const {
		Matrix ret;
		ret.m[0] = m[0]-rhs.m[0]; ret.m[1] = m[1]-rhs.m[1]; ret.m[2] = m[2]-rhs.m[2];
		ret.m[3] = m[3]-rhs.m[3]; ret.m[4] = m[4]-rhs.m[4]; ret.m[5] = m[5]-rhs.m[5];
		ret.m[6] = m[6]-rhs.m[6]; ret.m[7] = m[7]-rhs.m[7]; ret.m[8] = m[8]-rhs.m[8];
		return ret;
	}
	
	Matrix opAdd(const float rhs) const {
		Matrix ret;
		ret.m[0] = m[0]+rhs; ret.m[1] = m[1]+rhs; ret.m[2] = m[2]+rhs;
		ret.m[3] = m[3]+rhs; ret.m[4] = m[4]+rhs; ret.m[5] = m[5]+rhs;
		ret.m[6] = m[6]+rhs; ret.m[7] = m[7]+rhs; ret.m[8] = m[8]+rhs;
		return ret;
	}
	
	Matrix opSub(const float rhs) const {
		Matrix ret;
		ret.m[0] = m[0]-rhs; ret.m[1] = m[1]-rhs; ret.m[2] = m[2]-rhs;
		ret.m[3] = m[3]-rhs; ret.m[4] = m[4]-rhs; ret.m[5] = m[5]-rhs;
		ret.m[6] = m[6]-rhs; ret.m[7] = m[7]-rhs; ret.m[8] = m[8]-rhs;
		return ret;
	}
	
	Matrix opAdd(const int rhs) const {
		Matrix ret;
		ret.m[0] = m[0]+rhs; ret.m[1] = m[1]+rhs; ret.m[2] = m[2]+rhs;
		ret.m[3] = m[3]+rhs; ret.m[4] = m[4]+rhs; ret.m[5] = m[5]+rhs;
		ret.m[6] = m[6]+rhs; ret.m[7] = m[7]+rhs; ret.m[8] = m[8]+rhs;
		return ret;
	}
	
	Matrix opSub(const int rhs) const {
		Matrix ret;
		ret.m[0] = m[0]-rhs; ret.m[1] = m[1]-rhs; ret.m[2] = m[2]-rhs;
		ret.m[3] = m[3]-rhs; ret.m[4] = m[4]-rhs; ret.m[5] = m[5]-rhs;
		ret.m[6] = m[6]-rhs; ret.m[7] = m[7]-rhs; ret.m[8] = m[8]-rhs;
		return ret;
	}

	//Multiplication & Division
	Matrix@ opMulAssign(const Matrix& in rhs) {
		float[] ans = float[](9);
		ans[0] = m[0]*rhs.m[0] + m[1]*rhs.m[3] + m[2]*rhs.m[6];
		ans[1] = m[0]*rhs.m[1] + m[1]*rhs.m[4] + m[2]*rhs.m[7];
		ans[2] = m[0]*rhs.m[2] + m[1]*rhs.m[5] + m[2]*rhs.m[8];
		ans[3] = m[3]*rhs.m[0] + m[4]*rhs.m[3] + m[5]*rhs.m[6];
		ans[4] = m[3]*rhs.m[1] + m[4]*rhs.m[4] + m[5]*rhs.m[7];
		ans[5] = m[3]*rhs.m[2] + m[4]*rhs.m[5] + m[5]*rhs.m[8];
		ans[6] = m[6]*rhs.m[0] + m[7]*rhs.m[3] + m[8]*rhs.m[6];
		ans[7] = m[6]*rhs.m[1] + m[7]*rhs.m[4] + m[8]*rhs.m[7];
		ans[8] = m[6]*rhs.m[2] + m[7]*rhs.m[5] + m[8]*rhs.m[8];
		m = ans;
		return this;
	}
	
	Matrix@ opMulAssign(const float rhs) {
		m[0] *= rhs; m[1] *= rhs; m[2] *= rhs;
		m[3] *= rhs; m[4] *= rhs; m[5] *= rhs;
		m[6] *= rhs; m[7] *= rhs; m[8] *= rhs;
		return this;
	}
	
	Matrix@ opMulAssign(const int rhs) {
		m[0] *= rhs; m[1] *= rhs; m[2] *= rhs;
		m[3] *= rhs; m[4] *= rhs; m[5] *= rhs;
		m[6] *= rhs; m[7] *= rhs; m[8] *= rhs;
		return this;
	}
	
	Matrix@ opDivAssign(const float rhs) {
		m[0] /= rhs; m[1] /= rhs; m[2] /= rhs;
		m[3] /= rhs; m[4] /= rhs; m[5] /= rhs;
		m[6] /= rhs; m[7] /= rhs; m[8] /= rhs;
		return this;
	}
	
	Matrix@ opDivAssign(const int rhs) {
		m[0] /= rhs; m[1] /= rhs; m[2] /= rhs;
		m[3] /= rhs; m[4] /= rhs; m[5] /= rhs;
		m[6] /= rhs; m[7] /= rhs; m[8] /= rhs;
		return this;
	}
	
	Matrix opMul(const Matrix& in rhs) const {
		Matrix ans;
		ans.m[0] = m[0]*rhs.m[0] + m[1]*rhs.m[3] + m[2]*rhs.m[6];
		ans.m[1] = m[0]*rhs.m[1] + m[1]*rhs.m[4] + m[2]*rhs.m[7];
		ans.m[2] = m[0]*rhs.m[2] + m[1]*rhs.m[5] + m[2]*rhs.m[8];
		ans.m[3] = m[3]*rhs.m[0] + m[4]*rhs.m[3] + m[5]*rhs.m[6];
		ans.m[4] = m[3]*rhs.m[1] + m[4]*rhs.m[4] + m[5]*rhs.m[7];
		ans.m[5] = m[3]*rhs.m[2] + m[4]*rhs.m[5] + m[5]*rhs.m[8];
		ans.m[6] = m[6]*rhs.m[0] + m[7]*rhs.m[3] + m[8]*rhs.m[6];
		ans.m[7] = m[6]*rhs.m[1] + m[7]*rhs.m[4] + m[8]*rhs.m[7];
		ans.m[8] = m[6]*rhs.m[2] + m[7]*rhs.m[5] + m[8]*rhs.m[8];
		return ans;
	}
	
	Matrix opMul(const float rhs) const {
		Matrix ans;
		ans.m[0] = m[0]*rhs; ans.m[1] = m[1]*rhs; ans.m[2] = m[2]*rhs; 
		ans.m[3] = m[3]*rhs; ans.m[4] = m[4]*rhs; ans.m[5] = m[5]*rhs; 
		ans.m[6] = m[6]*rhs; ans.m[7] = m[7]*rhs; ans.m[8] = m[8]*rhs; 
		return ans;
	}
	
	Matrix opMul(const int rhs) const {
		Matrix ans;
		ans.m[0] = m[0]*rhs; ans.m[1] = m[1]*rhs; ans.m[2] = m[2]*rhs; 
		ans.m[3] = m[3]*rhs; ans.m[4] = m[4]*rhs; ans.m[5] = m[5]*rhs; 
		ans.m[6] = m[6]*rhs; ans.m[7] = m[7]*rhs; ans.m[8] = m[8]*rhs; 
		return ans;
	}
	
	Matrix opDiv(const float rhs) const {
		Matrix ans;
		ans.m[0] = m[0]/rhs; ans.m[1] = m[1]/rhs; ans.m[2] = m[2]/rhs; 
		ans.m[3] = m[3]/rhs; ans.m[4] = m[4]/rhs; ans.m[5] = m[5]/rhs; 
		ans.m[6] = m[6]/rhs; ans.m[7] = m[7]/rhs; ans.m[8] = m[8]/rhs; 
		return ans;
	}
	
	Matrix opDiv(const int rhs) const {
		Matrix ans;
		ans.m[0] = m[0]/rhs; ans.m[1] = m[1]/rhs; ans.m[2] = m[2]/rhs; 
		ans.m[3] = m[3]/rhs; ans.m[4] = m[4]/rhs; ans.m[5] = m[5]/rhs; 
		ans.m[6] = m[6]/rhs; ans.m[7] = m[7]/rhs; ans.m[8] = m[8]/rhs; 
		return ans;
	}
	
	Vec3 opMul(const Vec3& in rhs) const {
		Vec3 vector;
		vector.x = m[0]*rhs.x + m[1]*rhs.y + m[2]*rhs.z;
		vector.y = m[3]*rhs.x + m[4]*rhs.y + m[5]*rhs.z;
		vector.z = m[6]*rhs.x + m[7]*rhs.y + m[8]*rhs.z;
		return vector;
	}
	
	//Indexing
	float opIndex(uint index) const {
		return m[index];
	}
	
	void opIndex(uint index, float value) {
		m[index] = value;
	}
	
	void opIndex(uint index, int value) {
		m[index] = float(value);
	}
}

#endif